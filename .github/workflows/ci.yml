name: Zokio CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  ZIG_VERSION: 0.14.0

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 代码格式检查
        run: |
          zig fmt --check src/
          zig fmt --check tests/
          zig fmt --check examples/

      - name: 编译检查
        run: zig build --summary all

      - name: 静态分析
        run: |
          # 启用所有编译器警告
          zig build -Doptimize=Debug -Dcpu=baseline --summary all

  # 跨平台测试
  test:
    name: 测试 (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        zig-version: [0.14.0, master]
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ matrix.zig-version }}

      - name: 缓存 Zig 依赖
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/zig
            zig-cache
          key: ${{ runner.os }}-zig-${{ matrix.zig-version }}-${{ hashFiles('build.zig.zon') }}

      - name: 运行单元测试
        run: zig build test --summary all

      - name: 运行集成测试
        run: zig build integration-test --summary all

      - name: 运行示例验证
        run: zig build test-examples --summary all

  # 性能基准测试
  benchmark:
    name: 性能基准测试
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 运行性能基准测试
        run: |
          zig build benchmark --summary all
          zig build benchmark-comparison --summary all

      - name: 上传基准测试结果
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmarks/reports/

  # 内存安全检查
  memory-safety:
    name: 内存安全检查
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 安装 Valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: 内存泄漏检测
        run: |
          zig build test -Doptimize=Debug
          valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
            --track-origins=yes --verbose --log-file=valgrind-out.txt \
            ./zig-out/bin/test || true

      - name: 上传 Valgrind 报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: valgrind-report
          path: valgrind-out.txt

  # 代码覆盖率
  coverage:
    name: 代码覆盖率
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 运行覆盖率测试
        run: |
          # 使用 kcov 或其他覆盖率工具
          zig build test -Dtest-coverage=true

      - name: 上传覆盖率报告
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 文档生成
  docs:
    name: 文档生成
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 生成 API 文档
        run: |
          zig build docs
          
      - name: 部署文档到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-output

  # 发布检查
  release-check:
    name: 发布检查
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: 设置 Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: ${{ env.ZIG_VERSION }}

      - name: 构建发布版本
        run: |
          zig build -Doptimize=ReleaseFast --summary all
          zig build -Doptimize=ReleaseSmall --summary all

      - name: 运行发布测试
        run: |
          zig build test -Doptimize=ReleaseFast
          zig build benchmark -Doptimize=ReleaseFast

      - name: 创建发布包
        run: |
          mkdir -p release
          cp -r zig-out/* release/
          tar -czf zokio-${{ github.ref_name }}.tar.gz release/

      - name: 上传发布包
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: zokio-${{ github.ref_name }}.tar.gz
